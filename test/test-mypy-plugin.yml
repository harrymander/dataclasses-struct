- case: test_is_dataclass
  mypy_config: 'plugins = dataclasses_struct.ext.mypy_plugin'
  main: |
    import dataclasses_struct as dcs

    @dcs.dataclass_struct()
    class Test:
        x: int

    t = Test(x=1)  # should work
    t = Test(1)  # should work
    reveal_type(t.x)  # N: Revealed type is "builtins.int"


- case: test_pack_returns_bytes
  mypy_config: 'plugins = dataclasses_struct.ext.mypy_plugin'
  main: |
    import dataclasses_struct as dcs

    @dcs.dataclass_struct()
    class Test:
        x: int

    t = Test(2)
    reveal_type(t.pack())  # N: Revealed type is "builtins.bytes"


- case: test_dataclass_struct_attribute
  mypy_config: 'plugins = dataclasses_struct.ext.mypy_plugin'
  main: |
    import dataclasses_struct as dcs

    @dcs.dataclass_struct()
    class Test:
        x: int

    reveal_type(Test.__dataclass_struct__.size)  # N: Revealed type is "builtins.int"
    reveal_type(Test.__dataclass_struct__.format)  # N: Revealed type is "builtins.str"
    reveal_type(Test.__dataclass_struct__.mode)  # N: Revealed type is "builtins.str"


- case: test_from_packed_returns_instance
  mypy_config: 'plugins = dataclasses_struct.ext.mypy_plugin'
  main: |
    import dataclasses_struct as dcs

    @dcs.dataclass_struct()
    class Test:
        x: int

    t = Test.from_packed(Test(1).pack())
    reveal_type(t)  # N: Revealed type is "main.Test"

- case: test_from_packed_supports_bytearray_argument
  mypy_config: 'plugins = dataclasses_struct.ext.mypy_plugin'
  main: |
    import dataclasses_struct as dcs

    @dcs.dataclass_struct()
    class Test:
        x: int

    t = Test.from_packed(bytearray(Test(1).pack()))
    reveal_type(t)  # N: Revealed type is "main.Test"

- case: test_from_packed_supports_mmap_argument
  mypy_config: 'plugins = dataclasses_struct.ext.mypy_plugin'
  main: |
    import mmap
    import tempfile
    from pathlib import Path

    import dataclasses_struct as dcs

    @dcs.dataclass_struct()
    class Test:
        x: int

    packed = Test(1).pack()
    with tempfile.TemporaryDirectory() as tempdir:
        path = Path(tempdir) / "data"
        path.write_bytes(packed)
        with path.open("rb+") as f, mmap.mmap(f.fileno(), 0) as mapped:
          t = Test.from_packed(mapped)

    reveal_type(t)  # N: Revealed type is "main.Test"
