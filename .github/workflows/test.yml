name: Tests

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  tests:
    strategy:
      matrix:
        pyversion: ["3.8", "3.9", "3.10", "3.11"]
        os: ["Ubuntu", "Windows", "macOS"]
        include:
          - os: Windows
            image: windows-2022
          - os: Ubuntu
            image: ubuntu-22.04
          - os: macOS
            image: macos-12
    name: ${{ matrix.os }} / ${{ matrix.pyversion }}
    runs-on: ${{ matrix.image }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Specify Poetry dependency
        run: echo 'poetry==1.4.1' > requirements.txt

      - name: Set up Python ${{ matrix.pyversion }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.pyversion }}
          cache: 'pip'

      - name: Install Poetry
        run: pip install -r requirements.txt

      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache the virtualenv
        uses: actions/cache@v3
        with:
          path: ./.venv
          key: ${{ matrix.image }}-py${{ matrix.pyversion }}-venv-${{ hashFiles('**/poetry.lock') }}

      - name: Install
        run: poetry install -vvv --with dev --no-interaction --no-ansi

      - name: Configure MSVC
        uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os == 'Windows'

      - name: Lint
        run: poetry run ruff check --exclude .venv .

      - name: Python type checking
        run: poetry run mypy

      - name: Run tests
        run: poetry run pytest --cov --cov-report=xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.os == 'Ubuntu' && matrix.pyversion == '3.10'
        with:
          files: coverage.xml
